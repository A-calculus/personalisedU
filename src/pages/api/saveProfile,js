import fetch from 'node-fetch';
import { profilePrompt } from '../prompt/profilePrompt';

const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_KEY = process.env.SUPABASE_KEY;
const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';

export default async function handler(req, res) {
  if (req.method === 'POST') {
    const { userMessage, chatId } = req.body;

    if (!userMessage || !chatId) {
      return res.status(400).json({ error: 'User message and chat ID are required' });
    }

    try {
      // Get user information from OpenAI
      const userInfo = await getUserInfoFromOpenAI(userMessage);
      
      // Check if profile exists and save or update it
      await saveOrUpdateProfile(chatId, userInfo);
      
      res.status(200).json({ message: 'Profile saved successfully', userInfo });
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: 'Failed to save profile' });
    }
  } else {
    res.setHeader('Allow', ['POST']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}

async function getUserInfoFromOpenAI(userMessage) {
  const response = await fetch(OPENAI_API_URL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${process.env.LLM_TOKEN}`,
    },
    body: JSON.stringify({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'user',
          content: `${profilePrompt} Based on the following input: ${userMessage}`
        },
      ],
    }),
  });

  const data = await response.json();
  
  // Extract relevant information from the response
  const userInfo = parseUserInfo(data);
  
  return userInfo;
}

function parseUserInfo(data) {
  const content = data.choices[0]?.message?.content || "";
  
  // You can implement a more sophisticated parsing logic here
  // For this example, assume the response is a structured JSON
  try {
    return JSON.parse(content);
  } catch (error) {
    console.error('Failed to parse OpenAI response:', error);
    return {
      basic_info: "N/A",
      user_knowledge: "N/A",
      user_objectives: "N/A",
      program_info: "N/A",
      user_schedule: "N/A",
      calendar_content: "N/A",
    };
  }
}

async function saveOrUpdateProfile(chatId, userInfo) {
    const { basic_info, user_knowledge, user_objectives, program_info, user_schedule, calendar_content } = userInfo;
  
    // Check if the profile exists in Supabase
    const existingProfile = await fetch(`${SUPABASE_URL}/rest/v1/user_profiles?chat_id=eq.${chatId}`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${SUPABASE_KEY}`,
        'Content-Type': 'application/json',
      },
    });
  
    const existingData: any[] = await existingProfile.json() as any[];
  
    if (existingData.length > 0) {
      // Profile exists, update it
      const profileId = existingData[0].chat_id; // Assuming the ID is in the response
      const response = await fetch(`${SUPABASE_URL}/rest/v1/user_profiles?id=eq.${profileId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${SUPABASE_KEY}`,
          'Prefer': 'return=representation',
        },
        body: JSON.stringify({
          basic_info,
          user_knowledge,
          user_objectives,
          program_info,
          user_schedule,
          calendar_content,
        }),
      });
  
      if (!response.ok) {
        const error = await response.json();
        throw new Error(`Error updating profile: ${error.message}`);
      }
    } else {
      // Profile does not exist, create it
      const response = await fetch(`${SUPABASE_URL}/rest/v1/user_profiles`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${SUPABASE_KEY}`,
          'Prefer': 'return=representation',
        },
        body: JSON.stringify({
          chat_id: chatId,
          basic_info,
          user_knowledge,
          user_objectives,
          program_info,
          user_schedule,
          calendar_content,
        }),
      });
  
      if (!response.ok) {
        const error = await response.json();
        throw new Error(`Error saving profile: ${error.message}`);
      }
    }
  }